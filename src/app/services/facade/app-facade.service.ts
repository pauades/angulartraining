import { Injectable } from '@angular/core';
import { AppApiService } from '../api/app-api.service';
import { AppStateStoreService } from '../stateManagement/app-state-store.service';
import { Observable } from 'rxjs';
import { CashflowCategory } from 'src/models/CashflowCategory';

@Injectable({
  providedIn: 'root'
})
export class AppFacadeService {

  constructor(private applicationAPI: AppApiService, private applicationState: AppStateStoreService) { }

  isUpdating$(): Observable<boolean> {
    return this.applicationState.isUpdating$();
  }

  getCashflowCategories$(): Observable<CashflowCategory[]> {
    // here we just pass the state without any projections
    // it may happen that it is necessary to combine two or more streams and expose to the components
    return this.applicationState.getCashflowCategories$();
  }

  loadCashflowCategories() {
    return this.applicationAPI.getCashflowCategories();
  }

  // optimistic update
  // 1. update UI state
  // 2. call API
  addCashflowCategory(category: CashflowCategory) {
    this.applicationState.addCashflowCategory(category);
    this.applicationAPI.createCashflowCategory(category)
      .subscribe(
        (addedCategoryWithId: CashflowCategory) => {
          // success callback - we have id generated by the server, let's update the state
          this.applicationState.updateCashflowCategoryId(category, addedCategoryWithId)
        },
        (error: any) => {
          // error callback - we need to rollback the state change
          this.applicationState.removeCashflowCategory(category);
          console.log(error);
        }
      );
  }

  // pessimistic update
  // 1. call API
  // 2. update UI state
  updateCashflowCategory(category: CashflowCategory) {
    this.applicationState.setUpdating(true);
    this.applicationAPI.updateCashflowCategory(category)
      .subscribe(
        () => this.applicationState.updateCashflowCategory(category),
        (error) => console.log(error),
        () => this.applicationState.setUpdating(false)
      );
  }
}
